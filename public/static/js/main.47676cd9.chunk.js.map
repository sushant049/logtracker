{"version":3,"sources":["assets/history.svg","assets/map-pin.svg","assets/LogTracker.svg","pages/Home.js","pages/NoMatch.js","components/Layout.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeContainer","styled","div","UserCard","Home","props","openModal","userID","userList","state","setState","modalState","currentUserData","filter","data","id","console","log","closeModal","loadUserData","axios","get","then","res","catch","err","componentDidMount","ok","members","this","Row","length","map","Col","sm","onClick","className","src","image_url","real_name","map_icon","tz","history_icon","activity_periods","end_time","Modal","show","onHide","animation","Header","closeButton","Title","Body","Component","NoMatch","Layout","Container","children","Styles","Navigation","Navbar","expand","Brand","href","LogTracker","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.47676cd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/history.ec071b1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/map-pin.23ae266f.svg\";","module.exports = __webpack_public_path__ + \"static/media/LogTracker.5bddf550.svg\";","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nimport { Row, Col, Modal } from 'react-bootstrap';\r\nimport history_icon from '../assets/history.svg';\r\nimport map_icon from '../assets/map-pin.svg';\r\n\r\nconst HomeContainer = styled.div`\r\n  padding: 2rem 0;\r\n`;\r\n\r\nconst UserCard = styled.div`\r\n  height: 120px;\r\n  background: #FFFFFF 0% 0% no-repeat padding-box;\r\n  border: 1px solid #E9E9E9;\r\n  border-radius: 4px;\r\n  opacity: 1;\r\n  margin: 16px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    box-shadow: 0px 4px 10px #16161629;\r\n    transition-duration: 0.5s;\r\n  }\r\n\r\n  .user-image {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    img {\r\n      height: 80px;\r\n      border-radius: 100%;\r\n    }\r\n  }\r\n\r\n  .user-details {\r\n    h5 {\r\n      color: #101010;\r\n    }\r\n\r\n    span {\r\n      font-size: 15px;\r\n      opacity: 0.7;\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nclass Home extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalState: false,\r\n      userList: [],\r\n      currentUserData: null\r\n    }\r\n  }\r\n\r\n  openModal = (userID) => {\r\n    const { userList } = this.state;\r\n    this.setState({ modalState: true });\r\n\r\n    // set the user data being accessed\r\n    let currentUserData = userList.filter(data => data.id == userID);\r\n    // console.log(currentUserData);\r\n    this.setState({currentUserData: currentUserData});\r\n    console.log(this.state.currentUserData);\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.setState({ modalState: false });\r\n  }\r\n\r\n  loadUserData = () => {\r\n    return axios.get(`/GetUserList`)\r\n    .then(res=>{\r\n      return res.data;\r\n    })\r\n    .catch(err=>{\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // load user data\r\n    this.loadUserData().then(data=>{\r\n      if(data.ok == true)\r\n        this.setState({userList: data.members});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { modalState, userList, currentUserData } = this.state;\r\n    console.log(currentUserData);\r\n    return(\r\n      <HomeContainer>\r\n        <Row>\r\n          {\r\n            userList.length ? userList.map(data=>(\r\n              <Col sm={4}>\r\n                <UserCard onClick={() => { this.openModal(data.id) } }>\r\n                  <Row>\r\n                    <Col sm={3} className=\"user-image\">\r\n                      <img src={data.image_url}/>\r\n                    </Col>\r\n                    <Col sm={9} className=\"user-details\">\r\n                      <h5>{data.real_name}</h5>\r\n                      <span><img src={map_icon}/> {data.tz}</span>\r\n                      <br />\r\n                      <span><img src={history_icon}/> {data.activity_periods[data.activity_periods.length-1].end_time}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </UserCard>\r\n              </Col>\r\n            )) : null\r\n          }\r\n        </Row>\r\n      \r\n        {\r\n          currentUserData!==null?()=>(\r\n          <Modal show={modalState} onHide={this.closeModal} animation={true}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>{currentUserData[0].real_name} Activity</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n              </Modal.Body>\r\n          </Modal>\r\n          ):null\r\n        }\r\n      </HomeContainer>\r\n    );\r\n  }  \r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nexport const NoMatch = () => (\r\n  <div>\r\n    <h2>Oops! No page found.</h2>\r\n  </div>\r\n)","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n  <Container>\r\n    {props.children}\r\n  </Container>\r\n)","import React from 'react';\r\nimport { Nav, Navbar, NavbarBrand, Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport LogTracker from '../assets/LogTracker.svg';\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: #fff;\r\n    padding: 2rem 0;    \r\n  }\r\n\r\n  .container {\r\n    justify-content: center;\r\n  }\r\n\r\n  .navbar-brand, .navbar-nav, .nav-link{\r\n    color: #000;\r\n    \r\n    .logo {\r\n      height: 50px;\r\n    }\r\n\r\n    &:hover {\r\n      color: #FBC900;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Navigation = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Container>\r\n        <Navbar.Brand href=\"/\"><img src={LogTracker} className=\"logo\"/></Navbar.Brand>\r\n      </Container>\r\n    </Navbar>\r\n  </Styles>\r\n)","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport { NoMatch } from './pages/NoMatch';\nimport { Layout } from './components/Layout';\nimport { Navigation } from './components/Navigation';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navigation />\n        <Layout>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/home\" component={Home} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Router>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}